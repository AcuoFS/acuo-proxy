'use strict'

const Router = require('restify-router').Router
const routerInstance = new Router()

const _ = require('lodash')

const derivativeService = require('app/services/derivative')


// get filtered data - actions
routerInstance.get('/derivative/actions', (req, res, next) => {
  // filter data
  const data = derivativeService.getRawData('data')

  // END
  res.json({
    dataType: 'derivativeAction',
    data: data
  })
})


// get filtered data - figures
// routerInstance.get('/derivative/figures', (req, res, next) => {
//   // init output
//   const output = []
//   let temp
//
//   // pre-defined filters allowed
//   const allowedFilterProps = ['legalEntity', 'type', 'status', 'cptyOrg', 'cptyEntity']
//
//   // get proper filters from request
//   const filters = _.pick(_.get(req, 'query', {}), allowedFilterProps)
//
//   // filter data
//   const filteredData = derivativeService.getFilteredData(filters)
//
//   // do calculation: group data by timeFrame, direction, status
//   const groupedData = _(filteredData)
//     .groupBy('timeFrame')
//     .mapValues(timeFrameData => _(timeFrameData).groupBy('direction').mapValues(directionData => _(directionData).groupBy('status')))
//
//   // calculate against groupedData
//   _(groupedData).each((timeFrameData, timeFrame) => {
//     _(timeFrameData).each((directionData, direction) => {
//       _(directionData).each((statusData, status) => {
//         output.push({
//           timeFrame: timeFrame,
//           direction: direction,
//           status: status,
//           sumInitialMargin: _(statusData).sumBy('initialMargin')
//         })
//       })
//     })
//   })
//
//   // END
//   res.json(output)
// })


// get filter values based on filtered data
// routerInstance.get('/derivative/filters', (req, res, next) => {
//   // pre-defined filters allowed
//   const allowedFilterProps = ['legalEntity', 'type', 'status', 'cptyOrg', 'cptyEntity']
//
//   // get proper filters from request
//   const filters = _.pick(_.get(req, 'query', {}), allowedFilterProps)
//
//   // filter data
//   const data = derivativeService.getFilteredData(filters)
//   const filterWithValues = _(allowedFilterProps).map(filterProp => {
//     return {
//       name: filterProp,
//       values: _(data).map(i => _.get(i, filterProp)).uniq()
//     }
//   })
//
//   // END: get unique values
//   res.json(filterWithValues)
// })

module.exports = (server) => routerInstance.applyRoutes(server)